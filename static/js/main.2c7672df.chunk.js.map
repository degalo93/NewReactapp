{"version":3,"sources":["components/Cards/index.js","components/Wrapper/index.js","components/Title/index.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","react_default","a","createElement","className","value","id","onClick","onCardClicked","alt","name","src","image","Wrapper","children","Title","Nav","score","topScore","App","state","characters","Tarot","_this","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shufflechar","array","i","length","j","Math","floor","random","_ref","charShuff","_this2","this","components_Wrapper","components_Nav","components_Title","map","character","components_Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c7672df.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Cards(props) {\r\n  return (\r\n    <div className=\"card\" value={props.id} onClick={() => props.onCardClicked(props.id)}\r\n>\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {props.name}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport  \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <nav className=\"navbar-nav navbar-expand-lg navbar-light \"  >\r\n        <div className=\"navbar-brand float-right\"> Score: {props.score}  </div>\r\n        <div className=\"navbar-brand float-right\"> High Score: {props.topScore} </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport characters from \"./characters.json\";\nimport Nav from \"./components/Nav\"\n\nfunction charShuff(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    characters, \n    score: 0,\n    topScore: 0,\n    Tarot: []\n\n  };\n  onCardClicked = id => {\n    if (this.state.Tarot.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ Tarot: this.state.Tarot.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n  \n    }\n    else if (newScore === this.state.topScore) {\n    \n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      topScore: this.state.topScore,\n      Tarot: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shufflechar = charShuff(characters);\n    this.setState({ characters: shufflechar });\n  };\n\n\n  // Map over this.state.friends and render a Card component for each character object\n  render() {\n    return (\n      <Wrapper>\n        <Nav score={this.state.score} topScore={this.state.topScore}/>\n        <Title>Harry Potter Tarot Cards\n          <h3>Click on the cards to earn points choose wisely dont click one more than once </h3>\n        </Title>\n        {this.state.characters.map(character => (\n          <Cards\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            onCardClicked={this.onCardClicked}\n            handleIncrement={this.handleIncrement}\n            handleReset={this.handleReset}\n            handleShuffle={this.handleShuffle}\n           \n          />\n        ))}\n      </Wrapper>\n    )\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}